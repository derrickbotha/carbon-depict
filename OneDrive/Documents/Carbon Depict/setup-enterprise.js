#!/usr/bin/env node

/**
 * Enterprise Setup Script
 * Complete setup for CarbonDepict enterprise-grade infrastructure
 */

import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'
import crypto from 'crypto'

console.log('üöÄ CarbonDepict Enterprise Setup')
console.log('================================')

// Check if we're in the right directory
if (!fs.existsSync('package.json')) {
  console.error('‚ùå Please run this script from the project root directory')
  process.exit(1)
}

// Check Node.js version
const nodeVersion = process.version
const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0])
if (majorVersion < 16) {
  console.error('‚ùå Node.js 16 or higher is required')
  process.exit(1)
}

console.log(`‚úÖ Node.js version: ${nodeVersion}`)

// Create environment files if they don't exist
function createEnvFiles() {
  console.log('\nüìù Creating environment files...')
  
  // Server .env
  const serverEnvPath = 'server/.env'
  if (!fs.existsSync(serverEnvPath)) {
    const serverEnvContent = `# CarbonDepict Server Environment Configuration
# Generated by enterprise setup script

# Core Application Settings
NODE_ENV=development
PORT=5500
CLIENT_URL=http://localhost:3500

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/carbondepict
MONGO_POOL_MAX=10
MONGO_POOL_MIN=2

# Redis Configuration (Optional)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Security Secrets (Generate strong secrets)
JWT_SECRET=${generateSecret()}
SESSION_SECRET=${generateSecret()}

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=1000

# Email Service (Configure for production)
SMTP_HOST=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=your_mailtrap_username
SMTP_PASS=your_mailtrap_password
EMAIL_FROM=noreply@carbondepict.com

# AI Integration (Optional)
AI_API_KEY=your_ai_api_key
AI_API_URL=https://api.x.ai/v1
OPENAI_API_KEY=your_openai_api_key
ANTHROPIC_API_KEY=your_anthropic_api_key
`

    fs.writeFileSync(serverEnvPath, serverEnvContent)
    console.log('‚úÖ Created server/.env')
  } else {
    console.log('‚ö†Ô∏è  server/.env already exists')
  }

  // Frontend .env
  const frontendEnvPath = '.env'
  if (!fs.existsSync(frontendEnvPath)) {
    const frontendEnvContent = `# CarbonDepict Frontend Environment Configuration
# Generated by enterprise setup script

VITE_API_URL=http://localhost:5500/api
VITE_APP_NAME=CarbonDepict
VITE_APP_VERSION=1.0.0
`

    fs.writeFileSync(frontendEnvPath, frontendEnvContent)
    console.log('‚úÖ Created .env')
  } else {
    console.log('‚ö†Ô∏è  .env already exists')
  }
}

// Generate a random secret
function generateSecret() {
  return crypto.randomBytes(32).toString('hex')
}

// Install dependencies
function installDependencies() {
  console.log('\nüì¶ Installing dependencies...')
  
  try {
    console.log('Installing root dependencies...')
    execSync('npm install', { stdio: 'inherit' })
    
    console.log('Installing server dependencies...')
    execSync('cd server && npm install', { stdio: 'inherit' })
    
    console.log('‚úÖ All dependencies installed')
  } catch (error) {
    console.error('‚ùå Failed to install dependencies:', error.message)
    process.exit(1)
  }
}

// Run database migrations
function runMigrations() {
  console.log('\nüóÑÔ∏è  Running database migrations...')
  
  try {
    execSync('cd server && node migrations/run-enterprise-migrations.js', { stdio: 'inherit' })
    console.log('‚úÖ Database migrations completed')
  } catch (error) {
    console.error('‚ùå Failed to run migrations:', error.message)
    console.log('Make sure MongoDB is running on localhost:27017')
    process.exit(1)
  }
}

// Create startup scripts
function createStartupScripts() {
  console.log('\nüîß Creating startup scripts...')
  
  // Windows batch file
  const windowsScript = `@echo off
echo Starting CarbonDepict Enterprise...
echo.

echo Starting backend server...
start "Backend Server" cmd /k "cd server && npm run dev"

echo Waiting for backend to start...
timeout /t 5 /nobreak > nul

echo Starting frontend...
start "Frontend Server" cmd /k "npm run dev"

echo.
echo CarbonDepict Enterprise is starting...
echo Backend: http://localhost:5500
echo Frontend: http://localhost:3500
echo.
pause
`

  fs.writeFileSync('start-enterprise.bat', windowsScript)
  console.log('‚úÖ Created start-enterprise.bat')

  // Unix shell script
  const unixScript = `#!/bin/bash
echo "Starting CarbonDepict Enterprise..."
echo

echo "Starting backend server..."
cd server && npm run dev &
BACKEND_PID=$!

echo "Waiting for backend to start..."
sleep 5

echo "Starting frontend..."
cd .. && npm run dev &
FRONTEND_PID=$!

echo
echo "CarbonDepict Enterprise is starting..."
echo "Backend: http://localhost:5500"
echo "Frontend: http://localhost:3500"
echo
echo "Press Ctrl+C to stop all services"

# Function to cleanup processes
cleanup() {
    echo "Stopping services..."
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
    exit 0
}

# Trap Ctrl+C
trap cleanup INT

# Wait for processes
wait $BACKEND_PID $FRONTEND_PID
`

  fs.writeFileSync('start-enterprise.sh', unixScript)
  fs.chmodSync('start-enterprise.sh', '755')
  console.log('‚úÖ Created start-enterprise.sh')
}

// Create health check script
function createHealthCheckScript() {
  console.log('\nüè• Creating health check script...')
  
  const healthCheckScript = `#!/usr/bin/env node

const http = require('http')

const checkHealth = (url, name) => {
  return new Promise((resolve) => {
    const req = http.get(url, (res) => {
      resolve({ name, status: 'healthy', statusCode: res.statusCode })
    })
    
    req.on('error', () => {
      resolve({ name, status: 'unhealthy', statusCode: null })
    })
    
    req.setTimeout(5000, () => {
      req.destroy()
      resolve({ name, status: 'timeout', statusCode: null })
    })
  })
}

async function main() {
  console.log('üè• CarbonDepict Health Check')
  console.log('============================')
  
  const checks = [
    checkHealth('http://localhost:5500/api/health', 'Backend API'),
    checkHealth('http://localhost:3500', 'Frontend App')
  ]
  
  const results = await Promise.all(checks)
  
  results.forEach(({ name, status, statusCode }) => {
    const icon = status === 'healthy' ? '‚úÖ' : '‚ùå'
    const statusText = status === 'healthy' ? \`Healthy (\${statusCode})\` : status
    console.log(\`\${icon} \${name}: \${statusText}\`)
  })
  
  const allHealthy = results.every(r => r.status === 'healthy')
  process.exit(allHealthy ? 0 : 1)
}

main().catch(console.error)
`

  fs.writeFileSync('health-check.js', healthCheckScript)
  fs.chmodSync('health-check.js', '755')
  console.log('‚úÖ Created health-check.js')
}

// Main setup function
async function main() {
  try {
    createEnvFiles()
    installDependencies()
    runMigrations()
    createStartupScripts()
    createHealthCheckScript()
    
    console.log('\nüéâ Enterprise Setup Complete!')
    console.log('============================')
    console.log('')
    console.log('Next steps:')
    console.log('1. Start MongoDB: mongod')
    console.log('2. Start the application:')
    console.log('   - Windows: start-enterprise.bat')
    console.log('   - Unix/Mac: ./start-enterprise.sh')
    console.log('3. Check health: node health-check.js')
    console.log('')
    console.log('Access your application:')
    console.log('- Frontend: http://localhost:3500')
    console.log('- Backend API: http://localhost:5500')
    console.log('- API Health: http://localhost:5500/api/health')
    console.log('')
    console.log('Default credentials:')
    console.log('- Email: admin@carbondepict.com')
    console.log('- Password: admin123')
    console.log('')
    console.log('‚ö†Ô∏è  Remember to:')
    console.log('- Change default credentials in production')
    console.log('- Configure email service for user verification')
    console.log('- Set up proper SSL certificates')
    console.log('- Configure production database')
    
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message)
    process.exit(1)
  }
}

// Run setup
main()
